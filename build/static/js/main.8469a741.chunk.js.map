{"version":3,"sources":["components/RaceMarkerIcon.js","components/MarkerPopup.js","components/RaceMarkers.js","components/MapView.js","components/Header.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["RaceMarkerIcon","name","html","L","divIcon","className","MarkerPopup","props","data","description","Popup","RaceMarkers","markers","marks","map","mark","index","Marker","position","geometry","icon","shortname","MapView","options","enableHighAccuracy","timeout","Infinity","maximumAge","state","currentLocation","lat","lng","zoom","myLocation","accuracy","startWatch","bind","success","navigator","geolocation","getCurrentPosition","this","error","alert","pos","crd","coords","console","log","setState","latitude","watchPosition","err","warn","code","message","MapContainer","center","TileLayer","url","attribution","Circle","longitude","radius","pathOptions","fillColor","Tooltip","Component","Header","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8469a741.chunk.js","sourcesContent":["import L from 'leaflet';\nimport './Header.css';\n\nexport const RaceMarkerIcon = (name) => {\n  let html = `<div>${name}</div>`;\n  return  L.divIcon({ className: 'markerIcon  ball', html});\n};\n","import React from 'react';\nimport {Popup} from 'react-leaflet';\nimport './Header.css';\n\nconst MarkerPopup = (props) => {\n  const { name, description } = props.data;\n\n  return  (<Popup>\n    <div className='popup-title'>{name}</div>\n    <div className='popup-text'>{description}</div>\n  </Popup>);\n};\n\nexport default MarkerPopup;","import React, { Fragment } from 'react'\nimport {Marker} from 'react-leaflet';\nimport {RaceMarkerIcon} from './RaceMarkerIcon';\nimport MarkerPopup from './MarkerPopup';\nimport './Header.css';\n\nconst RaceMarkers = (props) => {\n  const { marks } = props;\n\n  const markers = marks.map((mark, index) => (\n    <Marker className=\"markerSize\" key={index} position={mark.geometry} icon={RaceMarkerIcon(mark.shortname)} >\n      <MarkerPopup data={mark}/>\n    </Marker>\n  ));\n\n  return <Fragment>{markers}</Fragment>\n};\n\nexport default RaceMarkers;","import React, { Component } from 'react';\nimport { MapContainer, TileLayer , Circle, Tooltip} from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport data from '../assets/data';\nimport Markers from './RaceMarkers';\n//import { Tooltip } from 'leaflet';\n//import { Tooltip } from 'leaflet';\n\nclass MapView extends Component {\n  options = {\n    enableHighAccuracy: true,\n    timeout: Infinity,\n    maximumAge: 0\n  };\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.startWatch, this.error, this.options);\n    //  navigator.geolocation.watchPosition(this.success, this.error, this.options);\n      } else {\n      alert(\"Sorry Not available!\");\n      }\n  }\n\n  success(pos) {\n    var crd = pos.coords;\n    console.log(crd);\n    this.setState({myLocation: crd});\n    console.log('Your current position is a watch position');\n  }\n\n  startWatch(pos) {\n    var crd = pos.coords;\n    console.log(crd);\n   if(crd && crd.latitude) {\n    this.setState({myLocation: crd});\n   } else {\n     return;\n   }\n    console.log('Your current position is a get position');\n   navigator.geolocation.watchPosition(this.success, this.error, this.options); \n  }\n  \n error(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n  }\n\n  constructor(props) {\n    super(props);\n   \n    this.state = {\n      \n   currentLocation: { lat: 53.45444, lng: -6.057222 },\n      zoom: 12,\n      myLocation: null,\n     accuracy: \"\"\n    }\n    this.startWatch = this.startWatch.bind(this);\n   this.success = this.success.bind(this);\n \n   \n  }\n  render() {\n   \n    const { currentLocation, zoom } = this.state;\n    return (\n      <MapContainer center={currentLocation} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n        />        <Markers marks={data.marks}/>\n     {this.state.myLocation?\n        <Circle center={[this.state.myLocation.latitude, this.state.myLocation.longitude]} radius={40} pathOptions={{ fillColor: 'blue' }} >\n         <Tooltip>Accuracy is around {this.state.myLocation.accuracy} meters</Tooltip>\n         </Circle>\n        : \"\"}\n      </MapContainer>\n    );\n  }\n}\nexport default MapView;","import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n   \n    render() {\n      return (\n       <div className=\"MApp-header\"> Race Marker Map</div>\n      );\n    }\n  }\n  export default Header;","import React, { Component } from 'react';\nimport './Footer.css';\n\nclass Footer extends Component {\n   \n    render() {\n      return (\n       <div className=\"MApp-footer\"/>\n      );\n    }\n  }\n  export default Footer;","import React from 'react';\nimport MapView from './components/MapView';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nimport './App.css';function App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <MapView/>\n      <Footer/>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}